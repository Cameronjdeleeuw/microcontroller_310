/*
 * ---------------------
 * Title: Simple LED Blinking 
 * ---------------------
 * Program Details:
 *  The purpose of this program is to add, subtract, multiply, and divide two numbers input by the user 
 * Inputs: PORTB(keypad) 
 * Outputs: PORTD(LEDS)
 * Setup: C- Simulator
 * Date: April 9, 2024
 * File Dependencies / Libraries: It is required to include the 
 * Configuration Header File 
 * Compiler: xc8, 2.4
 * Author: Cameron deLeeuw
 * Versions:
 *      V1.0: Added function to read keypad (4/6/24)
 *      V1.1: Added functions to calculate and display value
 *      Notes:
 *              
 */

// PIC18F46K42 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1L
#pragma config FEXTOSC = LP     // External Oscillator Selection (LP (crystal oscillator) optimized for 32.768 kHz; PFM set to low power)
#pragma config RSTOSC = EXTOSC  // Reset Oscillator Selection (EXTOSC operating per FEXTOSC bits (device manufacturing default))

// CONFIG1H
#pragma config CLKOUTEN = OFF   // Clock out Enable bit (CLKOUT function is disabled)
#pragma config PR1WAY = ON      // PRLOCKED One-Way Set Enable bit (PRLOCK bit can be cleared and set only once)
#pragma config CSWEN = ON       // Clock Switch Enable bit (Writing to NOSC and NDIV is allowed)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor enabled)

// CONFIG2L
#pragma config MCLRE = EXTMCLR  // MCLR Enable bit (If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR )
#pragma config PWRTS = PWRT_OFF // Power-up timer selection bits (PWRT is disabled)
#pragma config MVECEN = ON      // Multi-vector enable bit (Multi-vector enabled, Vector table used for interrupts)
#pragma config IVT1WAY = ON     // IVTLOCK bit One-way set enable bit (IVTLOCK bit can be cleared and set only once)
#pragma config LPBOREN = OFF    // Low Power BOR Enable bit (ULPBOR disabled)
#pragma config BOREN = SBORDIS  // Brown-out Reset Enable bits (Brown-out Reset enabled , SBOREN bit is ignored)

// CONFIG2H
#pragma config BORV = VBOR_2P45 // Brown-out Reset Voltage Selection bits (Brown-out Reset Voltage (VBOR) set to 2.45V)
#pragma config ZCD = OFF        // ZCD Disable bit (ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON)
#pragma config PPS1WAY = ON     // PPSLOCK bit One-Way Set Enable bit (PPSLOCK bit can be cleared and set only once; PPS registers remain locked after one clear/set cycle)
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config DEBUG = OFF      // Debugger Enable bit (Background debugger disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Extended Instruction Set and Indexed Addressing Mode disabled)

// CONFIG3L
#pragma config WDTCPS = WDTCPS_31// WDT Period selection bits (Divider ratio 1:65536; software control of WDTPS)
#pragma config WDTE = OFF       // WDT operating mode (WDT Disabled; SWDTEN is ignored)

// CONFIG3H
#pragma config WDTCWS = WDTCWS_7// WDT Window Select bits (window always open (100%); software control; keyed access not required)
#pragma config WDTCCS = SC      // WDT input clock selector (Software Control)

// CONFIG4L
#pragma config BBSIZE = BBSIZE_512// Boot Block Size selection bits (Boot Block size is 512 words)
#pragma config BBEN = OFF       // Boot Block enable bit (Boot block disabled)
#pragma config SAFEN = OFF      // Storage Area Flash enable bit (SAF disabled)
#pragma config WRTAPP = OFF     // Application Block write protection bit (Application Block not write protected)

// CONFIG4H
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block not write-protected)
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)
#pragma config WRTSAF = OFF     // SAF Write protection bit (SAF not Write Protected)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE configuration bit is ignored)

// CONFIG5L
#pragma config CP = OFF         // PFM and Data EEPROM Code Protection bit (PFM and Data EEPROM code protection disabled)

#include <xc.h> // must have this
//#include "../../../../../Program Files/Microchip/xc8/v2.40/pic/include/proc/pic18f46k42.h"
//#include "C:\Program Files\Microchip\xc8\v2.46\pic\include\proc\pic18f47k42.h"
//#include "C:\Program Files\Microchip\xc8\v2.46\pic\include\proc\pic18f47k42.h"

#define _XTAL_FREQ 4000000                 // Fosc  frequency for _delay()  library
#define FCY    _XTAL_FREQ/4
#define zero 0
#define one 1
#define two 2
#define three 3
#define four 4
#define five 5
#define six 6
#define seven 7
#define eight 8
#define nine 9
#define star 42
#define pound 35
#define A 43
#define B 95
#define C 120
#define D 47

// Program Functions
int readKeypad();
int saveNums();
void add();
void subtract();
void multiply();
void divide();

//Program variables
int currentButton = 100;
int buttonPressed = 100;
int X_Input_REG = 100;
int Y_Input_REG = 100;
int Display_Result_REG = 100;
char operation_REG = 0;
char firstDigit = 0;
char secondDigit = 0;
char thirdDigit = 0;
char fourthDigit = 0;
char whichDigit = 0;

char equEntered = 0;

void main (void){
    //Port initializations
    TRISB = 0b11110000; LATB = 0; ANSELB = 0;
    PORTB = 0b00000000;
    TRISD = 0b00000000; LATD = 0; ANSELD = 0;
    PORTD = 0b00000000;                     //turns off PORTB outputs so that the LED is initially off


    while(1){
        //currentButton = readKeypad();
        //saveNums(currentButton);

        if(operation_REG == A)
        {
            add();
        }
        if(operation_REG == B)
        {
            subtract();
        }
        if(operation_REG == C)
        {
            multiply();
        }
        if(operation_REG == D)
        {
            divide();
        }
        
    }
}

int readKeypad()
{
    //while(1){                    //loop until something is pressed
        PORTB = 0b00000001;
        //valPORTA = PORTA + 1;
        if(PORTB == 0b10000001) {
            buttonPressed = A;  //ASCII equivilant of +
            //whichDigit++;
            //PORTA = 0X01;
            //PORTD = 0x3F;
            __delay_ms(250);
            return buttonPressed;
        }
        if(PORTB == 0b01000001) {
            buttonPressed = B;  //ASCII equivilant of -
            //whichDigit++;
            __delay_ms(250);
            return buttonPressed;
        }
        if(PORTB == 0b00100001) {
            buttonPressed = C;  //ASCII equivilant of x
            //whichDigit++;
            __delay_ms(250);
            return buttonPressed;
        }
        if(PORTB == 0b00010001) {
            buttonPressed = D;  //ASCII equivilant of /
            //whichDigit++;
            __delay_ms(250);
            return buttonPressed;
        }
        //PORTB = 0b00000000;
        PORTB = 0b00000010;
        //valPORTA = PORTA + 2;
        if(PORTB == 0b10000010) {
            buttonPressed = three;  //ASCII equivilant of 3
            whichDigit++;
            __delay_ms(250);
            //hexToNum = 0x4F;
            return buttonPressed;
        }
        if(PORTB == 0b01000010) {
            buttonPressed = six;  //ASCII equivilant of 6
            whichDigit++;
            __delay_ms(250);
            //hexToNum = 0x7C;
            return buttonPressed;
        }
        if(PORTB == 0b00100010) {
            buttonPressed = nine;  //ASCII equivilant of 9
            whichDigit++;
            __delay_ms(250);
            //hexToNum = 0x67;
            return buttonPressed;
        }
        if(PORTB == 0b00010010) {
            buttonPressed = pound;  //ASCII equivilant of #(equ)
            //whichDigit++;
            //finNumEntered = 0;
            //equ = 1;
            __delay_ms(250);
            return buttonPressed;
        }
        //PORTB = 0b00000000;
        PORTB = 0b00000100;
        //valPORTA = PORTA + 4;
        if(PORTB == 0b10000100) {
            buttonPressed = two;  //ASCII equivilant of 2
            whichDigit++;
            __delay_ms(250);
            //hexToNum = 0x5B;
            return buttonPressed;
        }
        if(PORTB == 0b01000100) {
            buttonPressed = five;  //ASCII equivilant of 5
            whichDigit++;
            __delay_ms(250);
            //hexToNum = 0x6D;
            return buttonPressed;
        }
        if(PORTB == 0b00100100) {
            buttonPressed = eight;  //ASCII equivilant of 8
            whichDigit++;
            __delay_ms(250);
            //hexToNum = 0x7F;
            return buttonPressed;
        }
        if(PORTB == 0b00010100) {
            buttonPressed = zero;  //ASCII equivilant of 0
            whichDigit++;
            __delay_ms(250);
            //hexToNum = 0x3F;
            return buttonPressed;
        }
        //PORTB = 0b00000000;
        PORTB = 0b00001000;
        //valPORTA = PORTA + 8;
        if(PORTB == 0b10001000) {
            buttonPressed = one;  //ASCII equivilant of 1
            whichDigit++;
            __delay_ms(250);
            return buttonPressed;
        }
        if(PORTB == 0b01001000) {
            buttonPressed = four;  //ASCII equivilant of 4
            whichDigit++;
            __delay_ms(250);
            //hexToNum = 0x66;
            return buttonPressed;
        }
        if(PORTB == 0b00101000) {
            buttonPressed = seven;  //ASCII equivilant of 7
            whichDigit++;
            __delay_ms(250);
            //hexToNum = 0x07;
            return buttonPressed;
        }
        //if(PORTB == 0b00011000) {
        //    buttonPressed = star;  //ASCII equivilant of *(result)
        //    //whichDigit++;
        //    __delay_ms(250);
        //    equ = 0;
        //    resetDisp();
        //    return buttonPressed;
        //}
        //PORTB = 0b00000000;
        //valPORTA = 0;
        return 100;
        
    //}
}

int saveNums(buttonPressed) 
{
    if(buttonPressed >= zero && buttonPressed <= nine)
    {
        if(X_Input_REG == 100 && whichDigit <= 2)
        {   
            if (whichDigit == 1) 
            {
                firstDigit = buttonPressed;
                buttonPressed = 100;
                equEntered = 0;
                operation_REG = 0;
            }
            if (whichDigit == 2) 
            {
                secondDigit = buttonPressed;
                X_Input_REG = firstDigit*10 + secondDigit;
                PORTD = 1;
                buttonPressed = 100;
            }
        }
        if(Y_Input_REG == 100 && whichDigit >= 3)
        {   
            if (whichDigit == 3) 
            {
                thirdDigit = buttonPressed;
            }
            if (whichDigit == 4) 
            {
                fourthDigit = buttonPressed;
                Y_Input_REG = thirdDigit*10 + fourthDigit;
                PORTD = 2;
                buttonPressed = 100;
            }
        }
    }
    
    if( buttonPressed == A || buttonPressed == B || buttonPressed == C || buttonPressed == D )//&& (X_Input_REG == 100 && Y_Input_REG == 100) )
    {
        operation_REG = buttonPressed;
        buttonPressed = 100;
    }
}

void add()
{
    
    if(equEntered == 1) 
    {
        PORTB = Display_Result_REG;
    }
    while (equEntered == 0 && Y_Input_REG != 100)
    {
        Display_Result_REG = X_Input_REG + Y_Input_REG;
        PORTB = 0b000000010;
        if(PORTB == 0b00010010)
        {
            PORTD = Display_Result_REG;
            equEntered = 1;
            __delay_ms(250);
            X_Input_REG = 100;      //resets input REGS
            Y_Input_REG = 100;
            buttonPressed = 0;
            whichDigit = 0;
            //operation_REG = 0;
            
        }
    }
    //equEntered = 0;
    return;
}
void subtract()
{
    
    if(equEntered == 1) 
    {
        PORTB = Display_Result_REG;
    }
    while (equEntered == 0 && Y_Input_REG != 100)
    {
        Display_Result_REG = X_Input_REG - Y_Input_REG;
        PORTB = 0b000000010;
        if(PORTB == 0b00010010)
        {
            PORTD = Display_Result_REG;
            equEntered = 1;
            __delay_ms(250);
            X_Input_REG = 100;      //resets input REGS
            Y_Input_REG = 100;
            buttonPressed = 0;
            whichDigit = 0;
            //operation_REG = 0;
            
        }
    }
    //equEntered = 0;
    return;
}
void multiply()
{
    
    if(equEntered == 1) 
    {
        PORTB = Display_Result_REG;
    }
    while (equEntered == 0 && Y_Input_REG != 100)
    {
        Display_Result_REG = X_Input_REG * Y_Input_REG;
        PORTB = 0b000000010;
        if(PORTB == 0b00010010)
        {
            PORTD = Display_Result_REG;
            equEntered = 1;
            __delay_ms(250);
            X_Input_REG = 100;      //resets input REGS
            Y_Input_REG = 100;
            buttonPressed = 0;
            whichDigit = 0;
            //operation_REG = 0;
            
        }
    }
    //equEntered = 0;
    return;
}
void divide()
{
    
    if(equEntered == 1) 
    {
        PORTB = Display_Result_REG;
    }
    while (equEntered == 0 && Y_Input_REG != 100)
    {
        Display_Result_REG = X_Input_REG / Y_Input_REG;
        PORTB = 0b000000010;
        if(PORTB == 0b00010010)
        {
            PORTD = Display_Result_REG;
            equEntered = 1;
            __delay_ms(250);
            X_Input_REG = 100;      //resets input REGS
            Y_Input_REG = 100;
            buttonPressed = 0;
            whichDigit = 0;
            //operation_REG = 0;
            
        }
    }
    //equEntered = 0;
    return;
}
