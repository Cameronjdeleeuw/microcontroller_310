;----------------------------------------
;EE310 Assignment 6, Hex counter on 7 segment 
;----------------------------------------
;Program details
;----------------------------------------
;Purpose:	Program counts up or down in hex from 0-F or F-0 
;		and does so with button input
;Dependencies:	compiler,config
;Compiler:	<xc.inc>
;Author:	Cameron deLeeuw
;INPUTS:	up,down
;OUTPUTS:	PORTD 0-7
;Date:		3/27/2024
;Versions:	
    ;V1.0 -  Created functions to set pointers, load output registers, and button status.(3/20/2024)
    ;V1.1 -  Created functions to initalize input and ouput ports (3/25/24)
    ;v1.2 -  Completed code (3/27/24)
    ;v1.3 -  Remade aspects of code to support only one pointer counting up and down. (3/27/24)
;NOTES
;FROM V1.1 - 
    
;Dependencies
    #include "C:\Users\624ca\MPLABXProjects\Assignment6.X\defaultConfig02.inc"
    #include <xc.inc>
  
;Initalization
    PSECT absdata,abs,ovrld
    
    INNERLOOP	EQU 255 //SHOULD BE 255
    OUTERLOOP	EQU 3  //SHOULD BE 3
    
    ORG 0
    GOTO setup
    ORG	0x20

setup:
	    RCALL	_setupPortD
	    RCALL	_setupPortB
	    RCALL	loadOutputREGS	;Loads REGS 20-2F with equivilant of diplaying 0-F on 7 segment display
	    RCALL	resetDisplay	;resets display to 0
	    RCALL	initialPress
mainLoop: 
	    RCALL	resetPointers
	    RCALL	buttonsStatus
	    GOTO	mainLoop
	
_setupPortD:
    BANKSEL	PORTD ;
    CLRF	PORTD ;Init PORTA
    BANKSEL	LATD ;Data Latch
    CLRF	LATD ;
    BANKSEL	ANSELD ;
    CLRF	ANSELD ;digital I/O
    BANKSEL	TRISD ;
    MOVLW	0b00000000 ;Set RD[7:0] as outputs
    MOVWF	TRISD ;and set RD0 as ouput
    RETURN

_setupPortB:
    BANKSEL	PORTB ;
    CLRF	PORTB ;Init PORTB
    BANKSEL	LATB ;Data Latch
    CLRF	LATB ;
    BANKSEL	ANSELB ;
    CLRF	ANSELB ;digital I/O
    BANKSEL	TRISB ;
    MOVLW	0b00000011 ;Set RB[0,1] as inputs
    MOVWF	TRISB ;
    RETURN
	

	
loadOutputREGS:
	LFSR	0,0X20
	MOVLW	0X3F	    ;63 on OUTPUT bus
	MOVWF	POSTINC0,0
	MOVLW	0X06
	MOVWF	POSTINC0,0
	MOVLW	0X5B
	MOVWF	POSTINC0,0
	MOVLW	0X4F
	MOVWF	POSTINC0,0
	MOVLW	0X66
	MOVWF	POSTINC0,0
	MOVLW	0X6D
	MOVWF	POSTINC0,0
	MOVLW	0X7C
	MOVWF	POSTINC0,0
	MOVLW	0X07
	MOVWF	POSTINC0,0
	MOVLW	0X7F
	MOVWF	POSTINC0,0
	MOVLW	0X67
	MOVWF	POSTINC0,0
	MOVLW	0X77
	MOVWF	POSTINC0,0
	MOVLW	0X7C
	MOVWF	POSTINC0,0
	MOVLW	0X39
	MOVWF	POSTINC0,0
	MOVLW	0X5E
	MOVWF	POSTINC0,0
	MOVLW	0X79
	MOVWF	POSTINC0,0
	MOVLW	0X71
	MOVWF	POSTINC0,0
	//LFSR	0,0X20
	MOVLW	0XFF	;Next 4 lines are used to place values before and after the registers		;to 
	MOVWF	0X30	;that hold the hex values for the segmented display, these values 
	MOVLW	0X1F		;tell the pointers when to reset
	MOVWF	0X1F
	//MOVFF	0X20,PORTD  ;Display starts with 0
	RETURN
	
resetDisplay:
	MOVFF	0X20,PORTD ;should display 0 on startup
	RETURN
	
initialPress:
ini:	MOVLW	1
	CPFSEQ	PORTB
	GOTO	NXT
	LFSR	0,0X20
NXT:	MOVLW	2
	CPFSEQ	PORTB
	GOTO	NXT2
	LFSR	0,0X2F
NXT2:	MOVLW	0
	CPFSEQ	PORTB
	GOTO	NXT3
	GOTO	ini
NXT3:	RETURN	
	
resetPointers:
	MOVLW	0XFF	;When counting up IF pointer has made it beyond REG2F = F, reset to REG20 = 0
	CPFSEQ	INDF0
	GOTO	SKP1
	LFSR	0,0X20
    SKP1:	
	MOVLW	0X1F	;When counting down IF pointer has made it beyond REG20 = 0, reset to REG2F = F
	CPFSEQ	INDF0
	GOTO	SKP2
	LFSR	0,0X2F
    SKP2: 	
	RETURN
	
	

	
buttonsStatus:
	    MOVLW	1	
	    CPFSEQ	PORTB	;Checks if button 1 is pressed (up)
	    GOTO	NEXT
	    RCALL	countUp
	    GOTO	endOfCompare
    NEXT:   MOVLW	2
	    CPFSEQ	PORTB	;Checks if button 2 is pressed (down)
	    GOTO	NEXT2
	    RCALL	countDown
	    GOTO	endOfCompare
    NEXT2:  MOVLW	3
	    CPFSEQ	PORTB	;Checks if button 3 is pressed (reset)
	    GOTO	endOfCompare
	    RCALL	stopAndReset	
    endOfCompare:
RETURN
	 
	countDown:
	    
	     MOVLW   1
	     CPFSEQ  0X50
	     GOTO    HIP
	     MOVFF   POSTDEC0,PORTD
	     MOVFF   POSTDEC0,PORTD
    HIP:    
	    MOVFF   POSTDEC0,PORTD  ;Moves value from pointer to PORTD and decrements
	    CALL delay
	     MOVLW   2
	     MOVWF   0X50 
	RETURN
	
	countUp:
	    
	     MOVLW   2
	     CPFSEQ  0X50
	     GOTO    HIP2
	     MOVFF   PREINC0,PORTD
    HIP2:    MOVFF   POSTINC0,PORTD  ;Moves value from pointer to PORTD and incriments
	    CALL delay
	    
	     MOVLW   1
	     MOVWF   0X50
	RETURN
	    
	
	stopAndReset:	    ;Pointers are reset & 7segment displays 0
	  LFSR	0,0X20
	  LFSR	1,0X2F
	  MOVFF	0X20,PORTD
	  CALL	delay
	RETURN
	
	delay:			;Delay function
	    MOVLW   INNERLOOP
	    MOVWF   0X10
	    MOVWF   0X11
	    MOVWF   0X14    ;keeps unchanged value of 255
	    MOVLW   OUTERLOOP
	    MOVWF   0X12
	    restartLoop:
			DECF	0X10
			BNZ	restartLoop
		    MOVFF   0X14,0X10
		    DECF    0X11
		    BNZ	    restartLoop
		MOVFF   0X14,0X11
		DECF    0X12
		BNZ	restartLoop
	RETURN
	    
	    
END
	    


